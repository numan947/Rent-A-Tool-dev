/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveReturnTool } from '../fn/tool/approve-return-tool';
import { ApproveReturnTool$Params } from '../fn/tool/approve-return-tool';
import { archiveTool } from '../fn/tool/archive-tool';
import { ArchiveTool$Params } from '../fn/tool/archive-tool';
import { borrowTool } from '../fn/tool/borrow-tool';
import { BorrowTool$Params } from '../fn/tool/borrow-tool';
import { createTool } from '../fn/tool/create-tool';
import { CreateTool$Params } from '../fn/tool/create-tool';
import { findAllBorrowedTools } from '../fn/tool/find-all-borrowed-tools';
import { FindAllBorrowedTools$Params } from '../fn/tool/find-all-borrowed-tools';
import { findAllReturnedTools } from '../fn/tool/find-all-returned-tools';
import { FindAllReturnedTools$Params } from '../fn/tool/find-all-returned-tools';
import { findAllTools } from '../fn/tool/find-all-tools';
import { FindAllTools$Params } from '../fn/tool/find-all-tools';
import { findToolsByOwner } from '../fn/tool/find-tools-by-owner';
import { FindToolsByOwner$Params } from '../fn/tool/find-tools-by-owner';
import { getTool } from '../fn/tool/get-tool';
import { GetTool$Params } from '../fn/tool/get-tool';
import { PageResponseDtoToolResponseDto } from '../models/page-response-dto-tool-response-dto';
import { PageResponseDtoToolTransactionDto } from '../models/page-response-dto-tool-transaction-dto';
import { returnTool } from '../fn/tool/return-tool';
import { ReturnTool$Params } from '../fn/tool/return-tool';
import { ToolResponseDto } from '../models/tool-response-dto';
import { updateToolShareableStatus } from '../fn/tool/update-tool-shareable-status';
import { UpdateToolShareableStatus$Params } from '../fn/tool/update-tool-shareable-status';
import { uploadToolPhoto } from '../fn/tool/upload-tool-photo';
import { UploadToolPhoto$Params } from '../fn/tool/upload-tool-photo';


/**
 * Tool API
 */
@Injectable({ providedIn: 'root' })
export class ToolService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllTools()` */
  static readonly FindAllToolsPath = '/tools';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTools()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTools$Response(params?: FindAllTools$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoToolResponseDto>> {
    return findAllTools(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTools$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTools(params?: FindAllTools$Params, context?: HttpContext): Observable<PageResponseDtoToolResponseDto> {
    return this.findAllTools$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoToolResponseDto>): PageResponseDtoToolResponseDto => r.body)
    );
  }

  /** Path part for operation `createTool()` */
  static readonly CreateToolPath = '/tools';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTool()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTool$Response(params: CreateTool$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTool$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTool(params: CreateTool$Params, context?: HttpContext): Observable<number> {
    return this.createTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadToolPhoto()` */
  static readonly UploadToolPhotoPath = '/tools/photo/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadToolPhoto()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadToolPhoto$Response(params: UploadToolPhoto$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadToolPhoto(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadToolPhoto$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadToolPhoto(params: UploadToolPhoto$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadToolPhoto$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `borrowTool()` */
  static readonly BorrowToolPath = '/tools/borrow/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowTool()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowTool$Response(params: BorrowTool$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return borrowTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowTool$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowTool(params: BorrowTool$Params, context?: HttpContext): Observable<number> {
    return this.borrowTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateToolShareableStatus()` */
  static readonly UpdateToolShareableStatusPath = '/tools/shareable/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateToolShareableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateToolShareableStatus$Response(params: UpdateToolShareableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateToolShareableStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateToolShareableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateToolShareableStatus(params: UpdateToolShareableStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateToolShareableStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnTool()` */
  static readonly ReturnToolPath = '/tools/borrow/return/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnTool()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnTool$Response(params: ReturnTool$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return returnTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnTool$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnTool(params: ReturnTool$Params, context?: HttpContext): Observable<number> {
    return this.returnTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approveReturnTool()` */
  static readonly ApproveReturnToolPath = '/tools/borrow/return/approve/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveReturnTool()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnTool$Response(params: ApproveReturnTool$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return approveReturnTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveReturnTool$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnTool(params: ApproveReturnTool$Params, context?: HttpContext): Observable<number> {
    return this.approveReturnTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `archiveTool()` */
  static readonly ArchiveToolPath = '/tools/archived/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `archiveTool()` instead.
   *
   * This method doesn't expect any request body.
   */
  archiveTool$Response(params: ArchiveTool$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return archiveTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `archiveTool$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  archiveTool(params: ArchiveTool$Params, context?: HttpContext): Observable<number> {
    return this.archiveTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getTool()` */
  static readonly GetToolPath = '/tools/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTool()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTool$Response(params: GetTool$Params, context?: HttpContext): Observable<StrictHttpResponse<ToolResponseDto>> {
    return getTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTool$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTool(params: GetTool$Params, context?: HttpContext): Observable<ToolResponseDto> {
    return this.getTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<ToolResponseDto>): ToolResponseDto => r.body)
    );
  }

  /** Path part for operation `findAllReturnedTools()` */
  static readonly FindAllReturnedToolsPath = '/tools/returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedTools()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedTools$Response(params?: FindAllReturnedTools$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoToolTransactionDto>> {
    return findAllReturnedTools(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedTools$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedTools(params?: FindAllReturnedTools$Params, context?: HttpContext): Observable<PageResponseDtoToolTransactionDto> {
    return this.findAllReturnedTools$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoToolTransactionDto>): PageResponseDtoToolTransactionDto => r.body)
    );
  }

  /** Path part for operation `findToolsByOwner()` */
  static readonly FindToolsByOwnerPath = '/tools/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findToolsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findToolsByOwner$Response(params?: FindToolsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoToolResponseDto>> {
    return findToolsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findToolsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findToolsByOwner(params?: FindToolsByOwner$Params, context?: HttpContext): Observable<PageResponseDtoToolResponseDto> {
    return this.findToolsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoToolResponseDto>): PageResponseDtoToolResponseDto => r.body)
    );
  }

  /** Path part for operation `findAllBorrowedTools()` */
  static readonly FindAllBorrowedToolsPath = '/tools/borrowed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedTools()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedTools$Response(params?: FindAllBorrowedTools$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoToolTransactionDto>> {
    return findAllBorrowedTools(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedTools$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedTools(params?: FindAllBorrowedTools$Params, context?: HttpContext): Observable<PageResponseDtoToolTransactionDto> {
    return this.findAllBorrowedTools$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoToolTransactionDto>): PageResponseDtoToolTransactionDto => r.body)
    );
  }

}
